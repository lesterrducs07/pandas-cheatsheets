PANDAS is a popular python library it used for data manipulation and analysis very useful for data structures and functions.
It work well with tabular data --rows and columns. such as Excel, SQL databases, CSV files, JSON file, etc.

INSTALLATION
to use Pandas Lib first need to install Pandas to your IDE by going to CMD or Powershell.
type in-- pip install pandas. wait for it to download, when its successfully installed you can now use it to code.

IMPORT PANDA
in the beginning of your code is where you usually put libraries such as pandas.
type-- import pandas. this will activate pandas to your codebase.
you can also use aliases by typing-- import pandas as pd. this means that you make "pd" the alias for pandas. by using alias
you make your code simplier and neat.

PANDAS CHEATSHEETS

#INITIALIZE A SERIES- represent a row or column one dimensional
pd.Series(varname, index= "column_name_optional")

#INITIALIZE A DATAFRAME- represent both row and column and its tabular form. when initializing the row and column nos. should be the same
pd.DataFrame(varname, columns= column_name)
pd.DataFrame([varname1, varname2]) to add two or more file and array list in the DataFrame

#LOAD A CSV, XLSX, JSON, HTML, SAS ETC.
varname = pd.read_csv('filename.csv')
varname = pd.read_html('html_link', match = "table_name"

#TO CONCATINATE A TWO TABLE OR INCORPORATE THEM IN 1 TABLE
pd.concat([varname],[varname2])

varname.loc[0:10]

to_string()
add this function to print out all the rows of the DataFrame

dropna()
it drops or remove a rows with no values(NaN, Null)

drop()

head()
get the first 5 row of a DataFrame

tail()
get the first inverted 5 row of a DataFrame

info()
to check info of the file(it will show no. of column x row, data type, etc.

mean()
median()
mode()


dropna(inplace = True)
varname.dropna(subset=['column_name'], inplace = True)

fillna()
varname.fillna('value', inplace = True)
varname['column_name'].fillna('value', inplace=True)

varname['column_name'] = pd.to_datetime(varname['column_name'])

varname.loc['value', 'column_name'] = 45

df.loc[7, 'column_name] = value

for loop to change values for larger set of data
for x in df.index:
  if varname.loc[x, "column_name"] > 120:
    varname.loc[x, "column_name"] = 120

removing rows for larger set of data
for x in varname.index:
  if varname.loc[x, "column_name"] > 120:
    varname.drop(x, inplace = True) 


